##############################################################################################################################
#      Windows Build with Microsoft Visual Studio usage
##############################################################################################################################

1) Microsoft Visual Studio Professional 2022 (64-bit) Version 17.4.4

2) wxWidgets 
https://www.wxwidgets.org/downloads/
Windows Installer -> wxMSW-3.2.1-Setup.exe
Setup Env: WX_WIDGETS_PATH=C:\wxWidgets-3.2.1
Open "%WX_WIDGETS_PATH%\build\msw\wx_vc17.sln" in Visual Studio 2022.
Set in all projects "C++\Code Generation\Runtime Library" to /MTd in "Debug/(x64/Win32)" mode and /MT in "Release/(x64/Win32)" mode.
Build all projects in "(Debug/Release)/(x64/Win32)" mode.

3) Install CUDA Toolkit 12.0
https://developer.nvidia.com/cuda-downloads
cuda_12.0.0_527.41_windows.exe
Setup Env: CUDA_TOOLKIT_PATH=C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.0
Docs:
https://docs.nvidia.com/cuda/cuda-compiler-driver-nvcc/index.html#gpu-feature-list
https://docs.nvidia.com/cuda/cuda-compiler-driver-nvcc/index.html#virtual-architecture-feature-list
https://docs.nvidia.com/cuda/cuda-compiler-driver-nvcc/index.html#options-for-steering-gpu-code-generation
If -arch=all is specified, nvcc embeds a compiled code image for all supported architectures (sm_*), and a PTX program for the highest major virtual architecture
"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.0\bin\nvcc.exe" --list-gpu-arch
compute_50
compute_52
compute_53
compute_60
compute_61
compute_62
compute_70
compute_72
compute_75
compute_80
compute_86
compute_87
compute_89
compute_90

4) OpenCV
Download from
https://github.com/opencv/opencv/releases/tag/4.7.0
https://github.com/opencv/opencv/archive/4.7.0.zip
opencv-4.7.0.zip
Extract opencv-4.7.0.zip to C:\opencv-4.7.0
Docs:
https://docs.opencv.org/4.7.0/
https://perso.uclouvain.be/allan.barrea/opencv/cmake_config.html
https://jamesbowley.co.uk/build-compile-opencv-3-4-in-windows-with-cuda-9-0-and-intel-mkl-tbb/
https://stackoverflow.com/questions/14172856/compile-with-mt-instead-of-md-using-cmake

CMake 3.14+ required for VS build
https://cmake.org/download/
https://github.com/opencv/opencv/wiki/Intel%27s-Deep-Learning-Inference-Engine-backend
used: cmake-3.25.2-windows-x86_64.msi

Run: C:\Program Files\CMake\bin\cmake-gui.exe
select source directory: C:/opencv-4.7.0
select build directory: C:/opencv-4.7.0/builds/(Win32/Win64)
Enable the Grouped and Advanced checkboxes just below the build directory name.
Press the “Configure” button.
Pick Visual Studio 17 2022
Platform (Win32/x64)
finish
!!! * Select BUILD -> BUILD_opencv_world=ON *
Press again Configure
Press generate
Press open project
Build in Debug and Release mode for Platform Win32 and Win64
+ Build INSTALL project in CMakeTargets folder for Win64
NOTE: Projects will be built with MD* instead of MT* but it will be compatible with VSF due to used from dll.

Setup Env: 
OPENCV_PATH_X64=C:\opencv-4.7.0
OPENCV_PATH_X86=C:\opencv-4.7.0
after build should exist:
%OPENCV_PATH_X64%\builds\Win64\install\include
%OPENCV_PATH_X86%\builds\Win32\install\include

5)
download and extract:
https://ffmpeg.org/download.html
https://github.com/BtbN/FFmpeg-Builds/releases/tag/latest (Latest Auto-Build (2023-01-24 12:34))
https://github.com/sudo-nautilus/FFmpeg-Builds-Win32/releases/tag/latest (Latest Auto-Build (2023-01-24 12:35)
Docs:
https://ffmpeg.org/ffmpeg.html
https://ffmpeg.org/doxygen/trunk/examples.html
https://www.ffmpeg.org/doxygen/trunk/hwcontext_8c.html

ffmpeg-n5.1-latest-win64-gpl-shared-5.1.zip
ffmpeg-n5.1-latest-win32-gpl-shared-5.1.zip

Setup Env:
FFMPEG_PATH_X64=C:\ffmpeg-n5.1-latest-win64-gpl-shared-5.1
FFMPEG_PATH_X86=C:\ffmpeg-n5.1-latest-win32-gpl-shared-5.1

6)
Intel Parallel Studio XE 2020 Cluster Edition Update 1
for "Task Analysis"
https://software.intel.com/content/www/us/en/develop/documentation/vtune-help/top/analyze-performance/code-profiling-scenarios/task-analysis.html
https://software.intel.com/content/www/us/en/develop/documentation/vtune-help/top/api-support/instrumentation-and-tracing-technology-apis/instrumentation-and-tracing-technology-api-reference/task-api.html

##############################################################################################################################
#      Linux Build (Ubuntu 20.04.5 LTS)
##############################################################################################################################

1) wxWidgets 
Download from
https://www.wxwidgets.org/downloads/
Source for Linux, macOS, etc
wxWidgets-3.2.1.tar.bz2

# extract to ~/wxWidgets-3.2.1
# cd ~/wxWidgets-3.2.1

Required for build:
"libgtk-3-dev"
## sudo apt-cache search libgtk*
sudo apt install libgtk-3-dev

mkdir buildgtk
cd buildgtk
../configure --with-gtk
make -j16
sudo make install
sudo ldconfig

## wx-config --cxxflags --libs
## g++ myfoo.cpp `wx-config --cxxflags --libs` -o myfoo

2) OpenCV
Required for build:
"cmake"
sudo apt  install cmake

Download from
https://github.com/opencv/opencv/archive/4.7.0.zip
# extract to ~/opencv-4.7.0
# cd  ~/opencv-4.7.0

Docs:
https://docs.opencv.org/4.x/d7/d9f/tutorial_linux_install.html
https://docs.opencv.org/4.x/db/df5/tutorial_linux_gcc_cmake.html

# Create build directory
mkdir -p build && cd build
# Configure
cmake -DCMAKE_BUILD_TYPE=Release ..
# Build
cmake --build . --config Release -j 16
# Check:
ls bin
ls lib
# Install:
sudo make install

5)
FFMPEG
https://ffmpeg.org/download.html
https://launchpad.net/ubuntu/+source/ffmpeg

sudo apt install libavcodec-dev libavformat-dev libavutil-dev libswscale-dev libavfilter-dev

6)
Required for build:
"libtbb-dev"
sudo apt install libtbb-dev

# cd videosubfinder source directory
mkdir -p linux_build
cd linux_build
cmake -DCMAKE_BUILD_TYPE=Release ..
VERBOSE=1 cmake --build . --config Release -j 16 >log.txt 2>&1